// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/patyukin/go-online-library/pkg/db"
	mock "github.com/stretchr/testify/mock"
)

// TxManager is an autogenerated mock type for the TxManager type
type TxManager struct {
	mock.Mock
}

type TxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TxManager) EXPECT() *TxManager_Expecter {
	return &TxManager_Expecter{mock: &_m.Mock}
}

// ReadCommitted provides a mock function with given fields: ctx, f
func (_m *TxManager) ReadCommitted(ctx context.Context, f db.Handler) error {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for ReadCommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Handler) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_ReadCommitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadCommitted'
type TxManager_ReadCommitted_Call struct {
	*mock.Call
}

// ReadCommitted is a helper method to define mock.On call
//   - ctx context.Context
//   - f db.Handler
func (_e *TxManager_Expecter) ReadCommitted(ctx interface{}, f interface{}) *TxManager_ReadCommitted_Call {
	return &TxManager_ReadCommitted_Call{Call: _e.mock.On("ReadCommitted", ctx, f)}
}

func (_c *TxManager_ReadCommitted_Call) Run(run func(ctx context.Context, f db.Handler)) *TxManager_ReadCommitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Handler))
	})
	return _c
}

func (_c *TxManager_ReadCommitted_Call) Return(_a0 error) *TxManager_ReadCommitted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_ReadCommitted_Call) RunAndReturn(run func(context.Context, db.Handler) error) *TxManager_ReadCommitted_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxManager creates a new instance of TxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxManager {
	mock := &TxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
