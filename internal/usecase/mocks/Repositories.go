// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/patyukin/go-online-library/internal/usecase/model"
	mock "github.com/stretchr/testify/mock"
)

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

type Repositories_Expecter struct {
	mock *mock.Mock
}

func (_m *Repositories) EXPECT() *Repositories_Expecter {
	return &Repositories_Expecter{mock: &_m.Mock}
}

// DeleteDirectory provides a mock function with given fields: ctx, id
func (_m *Repositories) DeleteDirectory(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDirectory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_DeleteDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDirectory'
type Repositories_DeleteDirectory_Call struct {
	*mock.Call
}

// DeleteDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Repositories_Expecter) DeleteDirectory(ctx interface{}, id interface{}) *Repositories_DeleteDirectory_Call {
	return &Repositories_DeleteDirectory_Call{Call: _e.mock.On("DeleteDirectory", ctx, id)}
}

func (_c *Repositories_DeleteDirectory_Call) Run(run func(ctx context.Context, id int64)) *Repositories_DeleteDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repositories_DeleteDirectory_Call) Return(_a0 error) *Repositories_DeleteDirectory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_DeleteDirectory_Call) RunAndReturn(run func(context.Context, int64) error) *Repositories_DeleteDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFilter provides a mock function with given fields: ctx, filterID
func (_m *Repositories) DeleteFilter(ctx context.Context, filterID int64) error {
	ret := _m.Called(ctx, filterID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, filterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_DeleteFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFilter'
type Repositories_DeleteFilter_Call struct {
	*mock.Call
}

// DeleteFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filterID int64
func (_e *Repositories_Expecter) DeleteFilter(ctx interface{}, filterID interface{}) *Repositories_DeleteFilter_Call {
	return &Repositories_DeleteFilter_Call{Call: _e.mock.On("DeleteFilter", ctx, filterID)}
}

func (_c *Repositories_DeleteFilter_Call) Run(run func(ctx context.Context, filterID int64)) *Repositories_DeleteFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repositories_DeleteFilter_Call) Return(_a0 error) *Repositories_DeleteFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_DeleteFilter_Call) RunAndReturn(run func(context.Context, int64) error) *Repositories_DeleteFilter_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePromotion provides a mock function with given fields: ctx, filterID
func (_m *Repositories) DeletePromotion(ctx context.Context, filterID int64) error {
	ret := _m.Called(ctx, filterID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePromotion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, filterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_DeletePromotion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePromotion'
type Repositories_DeletePromotion_Call struct {
	*mock.Call
}

// DeletePromotion is a helper method to define mock.On call
//   - ctx context.Context
//   - filterID int64
func (_e *Repositories_Expecter) DeletePromotion(ctx interface{}, filterID interface{}) *Repositories_DeletePromotion_Call {
	return &Repositories_DeletePromotion_Call{Call: _e.mock.On("DeletePromotion", ctx, filterID)}
}

func (_c *Repositories_DeletePromotion_Call) Run(run func(ctx context.Context, filterID int64)) *Repositories_DeletePromotion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repositories_DeletePromotion_Call) Return(_a0 error) *Repositories_DeletePromotion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_DeletePromotion_Call) RunAndReturn(run func(context.Context, int64) error) *Repositories_DeletePromotion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDirectories provides a mock function with given fields: ctx
func (_m *Repositories) GetAllDirectories(ctx context.Context) ([]model.Directory, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDirectories")
	}

	var r0 []model.Directory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Directory, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Directory); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Directory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_GetAllDirectories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDirectories'
type Repositories_GetAllDirectories_Call struct {
	*mock.Call
}

// GetAllDirectories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repositories_Expecter) GetAllDirectories(ctx interface{}) *Repositories_GetAllDirectories_Call {
	return &Repositories_GetAllDirectories_Call{Call: _e.mock.On("GetAllDirectories", ctx)}
}

func (_c *Repositories_GetAllDirectories_Call) Run(run func(ctx context.Context)) *Repositories_GetAllDirectories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repositories_GetAllDirectories_Call) Return(_a0 []model.Directory, _a1 error) *Repositories_GetAllDirectories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_GetAllDirectories_Call) RunAndReturn(run func(context.Context) ([]model.Directory, error)) *Repositories_GetAllDirectories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFilters provides a mock function with given fields: ctx
func (_m *Repositories) GetAllFilters(ctx context.Context) ([]model.Filter, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFilters")
	}

	var r0 []model.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Filter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Filter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_GetAllFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFilters'
type Repositories_GetAllFilters_Call struct {
	*mock.Call
}

// GetAllFilters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repositories_Expecter) GetAllFilters(ctx interface{}) *Repositories_GetAllFilters_Call {
	return &Repositories_GetAllFilters_Call{Call: _e.mock.On("GetAllFilters", ctx)}
}

func (_c *Repositories_GetAllFilters_Call) Run(run func(ctx context.Context)) *Repositories_GetAllFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repositories_GetAllFilters_Call) Return(_a0 []model.Filter, _a1 error) *Repositories_GetAllFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_GetAllFilters_Call) RunAndReturn(run func(context.Context) ([]model.Filter, error)) *Repositories_GetAllFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPromotions provides a mock function with given fields: ctx
func (_m *Repositories) GetAllPromotions(ctx context.Context) ([]model.Promotion, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPromotions")
	}

	var r0 []model.Promotion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Promotion, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Promotion); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Promotion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_GetAllPromotions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPromotions'
type Repositories_GetAllPromotions_Call struct {
	*mock.Call
}

// GetAllPromotions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repositories_Expecter) GetAllPromotions(ctx interface{}) *Repositories_GetAllPromotions_Call {
	return &Repositories_GetAllPromotions_Call{Call: _e.mock.On("GetAllPromotions", ctx)}
}

func (_c *Repositories_GetAllPromotions_Call) Run(run func(ctx context.Context)) *Repositories_GetAllPromotions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repositories_GetAllPromotions_Call) Return(_a0 []model.Promotion, _a1 error) *Repositories_GetAllPromotions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_GetAllPromotions_Call) RunAndReturn(run func(context.Context) ([]model.Promotion, error)) *Repositories_GetAllPromotions_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirectory provides a mock function with given fields: ctx, id
func (_m *Repositories) GetDirectory(ctx context.Context, id int64) (model.Directory, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDirectory")
	}

	var r0 model.Directory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Directory, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Directory); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Directory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_GetDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirectory'
type Repositories_GetDirectory_Call struct {
	*mock.Call
}

// GetDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Repositories_Expecter) GetDirectory(ctx interface{}, id interface{}) *Repositories_GetDirectory_Call {
	return &Repositories_GetDirectory_Call{Call: _e.mock.On("GetDirectory", ctx, id)}
}

func (_c *Repositories_GetDirectory_Call) Run(run func(ctx context.Context, id int64)) *Repositories_GetDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repositories_GetDirectory_Call) Return(_a0 model.Directory, _a1 error) *Repositories_GetDirectory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_GetDirectory_Call) RunAndReturn(run func(context.Context, int64) (model.Directory, error)) *Repositories_GetDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirectoryByPromotionID provides a mock function with given fields: ctx, promotionID
func (_m *Repositories) GetDirectoryByPromotionID(ctx context.Context, promotionID int64) ([]model.Directory, error) {
	ret := _m.Called(ctx, promotionID)

	if len(ret) == 0 {
		panic("no return value specified for GetDirectoryByPromotionID")
	}

	var r0 []model.Directory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Directory, error)); ok {
		return rf(ctx, promotionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Directory); ok {
		r0 = rf(ctx, promotionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Directory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, promotionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_GetDirectoryByPromotionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirectoryByPromotionID'
type Repositories_GetDirectoryByPromotionID_Call struct {
	*mock.Call
}

// GetDirectoryByPromotionID is a helper method to define mock.On call
//   - ctx context.Context
//   - promotionID int64
func (_e *Repositories_Expecter) GetDirectoryByPromotionID(ctx interface{}, promotionID interface{}) *Repositories_GetDirectoryByPromotionID_Call {
	return &Repositories_GetDirectoryByPromotionID_Call{Call: _e.mock.On("GetDirectoryByPromotionID", ctx, promotionID)}
}

func (_c *Repositories_GetDirectoryByPromotionID_Call) Run(run func(ctx context.Context, promotionID int64)) *Repositories_GetDirectoryByPromotionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repositories_GetDirectoryByPromotionID_Call) Return(_a0 []model.Directory, _a1 error) *Repositories_GetDirectoryByPromotionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_GetDirectoryByPromotionID_Call) RunAndReturn(run func(context.Context, int64) ([]model.Directory, error)) *Repositories_GetDirectoryByPromotionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilter provides a mock function with given fields: ctx, filterID
func (_m *Repositories) GetFilter(ctx context.Context, filterID int64) (model.Filter, error) {
	ret := _m.Called(ctx, filterID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilter")
	}

	var r0 model.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Filter, error)); ok {
		return rf(ctx, filterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Filter); ok {
		r0 = rf(ctx, filterID)
	} else {
		r0 = ret.Get(0).(model.Filter)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, filterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_GetFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilter'
type Repositories_GetFilter_Call struct {
	*mock.Call
}

// GetFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filterID int64
func (_e *Repositories_Expecter) GetFilter(ctx interface{}, filterID interface{}) *Repositories_GetFilter_Call {
	return &Repositories_GetFilter_Call{Call: _e.mock.On("GetFilter", ctx, filterID)}
}

func (_c *Repositories_GetFilter_Call) Run(run func(ctx context.Context, filterID int64)) *Repositories_GetFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repositories_GetFilter_Call) Return(_a0 model.Filter, _a1 error) *Repositories_GetFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_GetFilter_Call) RunAndReturn(run func(context.Context, int64) (model.Filter, error)) *Repositories_GetFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPromotion provides a mock function with given fields: ctx, filterID
func (_m *Repositories) GetPromotion(ctx context.Context, filterID int64) (model.Promotion, error) {
	ret := _m.Called(ctx, filterID)

	if len(ret) == 0 {
		panic("no return value specified for GetPromotion")
	}

	var r0 model.Promotion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Promotion, error)); ok {
		return rf(ctx, filterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Promotion); ok {
		r0 = rf(ctx, filterID)
	} else {
		r0 = ret.Get(0).(model.Promotion)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, filterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_GetPromotion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPromotion'
type Repositories_GetPromotion_Call struct {
	*mock.Call
}

// GetPromotion is a helper method to define mock.On call
//   - ctx context.Context
//   - filterID int64
func (_e *Repositories_Expecter) GetPromotion(ctx interface{}, filterID interface{}) *Repositories_GetPromotion_Call {
	return &Repositories_GetPromotion_Call{Call: _e.mock.On("GetPromotion", ctx, filterID)}
}

func (_c *Repositories_GetPromotion_Call) Run(run func(ctx context.Context, filterID int64)) *Repositories_GetPromotion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repositories_GetPromotion_Call) Return(_a0 model.Promotion, _a1 error) *Repositories_GetPromotion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_GetPromotion_Call) RunAndReturn(run func(context.Context, int64) (model.Promotion, error)) *Repositories_GetPromotion_Call {
	_c.Call.Return(run)
	return _c
}

// InsertDirectory provides a mock function with given fields: ctx, directory
func (_m *Repositories) InsertDirectory(ctx context.Context, directory model.Directory) (int64, error) {
	ret := _m.Called(ctx, directory)

	if len(ret) == 0 {
		panic("no return value specified for InsertDirectory")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Directory) (int64, error)); ok {
		return rf(ctx, directory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Directory) int64); ok {
		r0 = rf(ctx, directory)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Directory) error); ok {
		r1 = rf(ctx, directory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_InsertDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDirectory'
type Repositories_InsertDirectory_Call struct {
	*mock.Call
}

// InsertDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - directory model.Directory
func (_e *Repositories_Expecter) InsertDirectory(ctx interface{}, directory interface{}) *Repositories_InsertDirectory_Call {
	return &Repositories_InsertDirectory_Call{Call: _e.mock.On("InsertDirectory", ctx, directory)}
}

func (_c *Repositories_InsertDirectory_Call) Run(run func(ctx context.Context, directory model.Directory)) *Repositories_InsertDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Directory))
	})
	return _c
}

func (_c *Repositories_InsertDirectory_Call) Return(_a0 int64, _a1 error) *Repositories_InsertDirectory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_InsertDirectory_Call) RunAndReturn(run func(context.Context, model.Directory) (int64, error)) *Repositories_InsertDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// InsertFilter provides a mock function with given fields: ctx, filter
func (_m *Repositories) InsertFilter(ctx context.Context, filter model.Filter) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for InsertFilter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Filter) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Filter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_InsertFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertFilter'
type Repositories_InsertFilter_Call struct {
	*mock.Call
}

// InsertFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.Filter
func (_e *Repositories_Expecter) InsertFilter(ctx interface{}, filter interface{}) *Repositories_InsertFilter_Call {
	return &Repositories_InsertFilter_Call{Call: _e.mock.On("InsertFilter", ctx, filter)}
}

func (_c *Repositories_InsertFilter_Call) Run(run func(ctx context.Context, filter model.Filter)) *Repositories_InsertFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Filter))
	})
	return _c
}

func (_c *Repositories_InsertFilter_Call) Return(_a0 int64, _a1 error) *Repositories_InsertFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_InsertFilter_Call) RunAndReturn(run func(context.Context, model.Filter) (int64, error)) *Repositories_InsertFilter_Call {
	_c.Call.Return(run)
	return _c
}

// InsertPromotion provides a mock function with given fields: ctx, promotion
func (_m *Repositories) InsertPromotion(ctx context.Context, promotion model.Promotion) (int64, error) {
	ret := _m.Called(ctx, promotion)

	if len(ret) == 0 {
		panic("no return value specified for InsertPromotion")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Promotion) (int64, error)); ok {
		return rf(ctx, promotion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Promotion) int64); ok {
		r0 = rf(ctx, promotion)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Promotion) error); ok {
		r1 = rf(ctx, promotion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_InsertPromotion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPromotion'
type Repositories_InsertPromotion_Call struct {
	*mock.Call
}

// InsertPromotion is a helper method to define mock.On call
//   - ctx context.Context
//   - promotion model.Promotion
func (_e *Repositories_Expecter) InsertPromotion(ctx interface{}, promotion interface{}) *Repositories_InsertPromotion_Call {
	return &Repositories_InsertPromotion_Call{Call: _e.mock.On("InsertPromotion", ctx, promotion)}
}

func (_c *Repositories_InsertPromotion_Call) Run(run func(ctx context.Context, promotion model.Promotion)) *Repositories_InsertPromotion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Promotion))
	})
	return _c
}

func (_c *Repositories_InsertPromotion_Call) Return(_a0 int64, _a1 error) *Repositories_InsertPromotion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_InsertPromotion_Call) RunAndReturn(run func(context.Context, model.Promotion) (int64, error)) *Repositories_InsertPromotion_Call {
	_c.Call.Return(run)
	return _c
}

// InsertsDirectories provides a mock function with given fields: ctx, directories
func (_m *Repositories) InsertsDirectories(ctx context.Context, directories []model.Directory) ([]int64, error) {
	ret := _m.Called(ctx, directories)

	if len(ret) == 0 {
		panic("no return value specified for InsertsDirectories")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Directory) ([]int64, error)); ok {
		return rf(ctx, directories)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.Directory) []int64); ok {
		r0 = rf(ctx, directories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.Directory) error); ok {
		r1 = rf(ctx, directories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_InsertsDirectories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertsDirectories'
type Repositories_InsertsDirectories_Call struct {
	*mock.Call
}

// InsertsDirectories is a helper method to define mock.On call
//   - ctx context.Context
//   - directories []model.Directory
func (_e *Repositories_Expecter) InsertsDirectories(ctx interface{}, directories interface{}) *Repositories_InsertsDirectories_Call {
	return &Repositories_InsertsDirectories_Call{Call: _e.mock.On("InsertsDirectories", ctx, directories)}
}

func (_c *Repositories_InsertsDirectories_Call) Run(run func(ctx context.Context, directories []model.Directory)) *Repositories_InsertsDirectories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Directory))
	})
	return _c
}

func (_c *Repositories_InsertsDirectories_Call) Return(_a0 []int64, _a1 error) *Repositories_InsertsDirectories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_InsertsDirectories_Call) RunAndReturn(run func(context.Context, []model.Directory) ([]int64, error)) *Repositories_InsertsDirectories_Call {
	_c.Call.Return(run)
	return _c
}

// InsertsFilters provides a mock function with given fields: ctx, filters
func (_m *Repositories) InsertsFilters(ctx context.Context, filters []model.Filter) ([]int64, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for InsertsFilters")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Filter) ([]int64, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.Filter) []int64); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.Filter) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositories_InsertsFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertsFilters'
type Repositories_InsertsFilters_Call struct {
	*mock.Call
}

// InsertsFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - filters []model.Filter
func (_e *Repositories_Expecter) InsertsFilters(ctx interface{}, filters interface{}) *Repositories_InsertsFilters_Call {
	return &Repositories_InsertsFilters_Call{Call: _e.mock.On("InsertsFilters", ctx, filters)}
}

func (_c *Repositories_InsertsFilters_Call) Run(run func(ctx context.Context, filters []model.Filter)) *Repositories_InsertsFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Filter))
	})
	return _c
}

func (_c *Repositories_InsertsFilters_Call) Return(_a0 []int64, _a1 error) *Repositories_InsertsFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositories_InsertsFilters_Call) RunAndReturn(run func(context.Context, []model.Filter) ([]int64, error)) *Repositories_InsertsFilters_Call {
	_c.Call.Return(run)
	return _c
}

// InsertsPromotionDirectories provides a mock function with given fields: ctx, promotionID, directoryIDs
func (_m *Repositories) InsertsPromotionDirectories(ctx context.Context, promotionID int64, directoryIDs []int64) error {
	ret := _m.Called(ctx, promotionID, directoryIDs)

	if len(ret) == 0 {
		panic("no return value specified for InsertsPromotionDirectories")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, promotionID, directoryIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_InsertsPromotionDirectories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertsPromotionDirectories'
type Repositories_InsertsPromotionDirectories_Call struct {
	*mock.Call
}

// InsertsPromotionDirectories is a helper method to define mock.On call
//   - ctx context.Context
//   - promotionID int64
//   - directoryIDs []int64
func (_e *Repositories_Expecter) InsertsPromotionDirectories(ctx interface{}, promotionID interface{}, directoryIDs interface{}) *Repositories_InsertsPromotionDirectories_Call {
	return &Repositories_InsertsPromotionDirectories_Call{Call: _e.mock.On("InsertsPromotionDirectories", ctx, promotionID, directoryIDs)}
}

func (_c *Repositories_InsertsPromotionDirectories_Call) Run(run func(ctx context.Context, promotionID int64, directoryIDs []int64)) *Repositories_InsertsPromotionDirectories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *Repositories_InsertsPromotionDirectories_Call) Return(_a0 error) *Repositories_InsertsPromotionDirectories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_InsertsPromotionDirectories_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *Repositories_InsertsPromotionDirectories_Call {
	_c.Call.Return(run)
	return _c
}

// InsertsPromotionFilters provides a mock function with given fields: ctx, promotionID, filterIDs
func (_m *Repositories) InsertsPromotionFilters(ctx context.Context, promotionID int64, filterIDs []int64) error {
	ret := _m.Called(ctx, promotionID, filterIDs)

	if len(ret) == 0 {
		panic("no return value specified for InsertsPromotionFilters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, promotionID, filterIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_InsertsPromotionFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertsPromotionFilters'
type Repositories_InsertsPromotionFilters_Call struct {
	*mock.Call
}

// InsertsPromotionFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - promotionID int64
//   - filterIDs []int64
func (_e *Repositories_Expecter) InsertsPromotionFilters(ctx interface{}, promotionID interface{}, filterIDs interface{}) *Repositories_InsertsPromotionFilters_Call {
	return &Repositories_InsertsPromotionFilters_Call{Call: _e.mock.On("InsertsPromotionFilters", ctx, promotionID, filterIDs)}
}

func (_c *Repositories_InsertsPromotionFilters_Call) Run(run func(ctx context.Context, promotionID int64, filterIDs []int64)) *Repositories_InsertsPromotionFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *Repositories_InsertsPromotionFilters_Call) Return(_a0 error) *Repositories_InsertsPromotionFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_InsertsPromotionFilters_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *Repositories_InsertsPromotionFilters_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDirectory provides a mock function with given fields: ctx, directory
func (_m *Repositories) UpdateDirectory(ctx context.Context, directory model.Directory) error {
	ret := _m.Called(ctx, directory)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDirectory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Directory) error); ok {
		r0 = rf(ctx, directory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_UpdateDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDirectory'
type Repositories_UpdateDirectory_Call struct {
	*mock.Call
}

// UpdateDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - directory model.Directory
func (_e *Repositories_Expecter) UpdateDirectory(ctx interface{}, directory interface{}) *Repositories_UpdateDirectory_Call {
	return &Repositories_UpdateDirectory_Call{Call: _e.mock.On("UpdateDirectory", ctx, directory)}
}

func (_c *Repositories_UpdateDirectory_Call) Run(run func(ctx context.Context, directory model.Directory)) *Repositories_UpdateDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Directory))
	})
	return _c
}

func (_c *Repositories_UpdateDirectory_Call) Return(_a0 error) *Repositories_UpdateDirectory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_UpdateDirectory_Call) RunAndReturn(run func(context.Context, model.Directory) error) *Repositories_UpdateDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFilter provides a mock function with given fields: ctx, filter
func (_m *Repositories) UpdateFilter(ctx context.Context, filter model.Filter) error {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Filter) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_UpdateFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFilter'
type Repositories_UpdateFilter_Call struct {
	*mock.Call
}

// UpdateFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.Filter
func (_e *Repositories_Expecter) UpdateFilter(ctx interface{}, filter interface{}) *Repositories_UpdateFilter_Call {
	return &Repositories_UpdateFilter_Call{Call: _e.mock.On("UpdateFilter", ctx, filter)}
}

func (_c *Repositories_UpdateFilter_Call) Run(run func(ctx context.Context, filter model.Filter)) *Repositories_UpdateFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Filter))
	})
	return _c
}

func (_c *Repositories_UpdateFilter_Call) Return(_a0 error) *Repositories_UpdateFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_UpdateFilter_Call) RunAndReturn(run func(context.Context, model.Filter) error) *Repositories_UpdateFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePromotion provides a mock function with given fields: ctx, promotion
func (_m *Repositories) UpdatePromotion(ctx context.Context, promotion model.Promotion) error {
	ret := _m.Called(ctx, promotion)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePromotion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Promotion) error); ok {
		r0 = rf(ctx, promotion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositories_UpdatePromotion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePromotion'
type Repositories_UpdatePromotion_Call struct {
	*mock.Call
}

// UpdatePromotion is a helper method to define mock.On call
//   - ctx context.Context
//   - promotion model.Promotion
func (_e *Repositories_Expecter) UpdatePromotion(ctx interface{}, promotion interface{}) *Repositories_UpdatePromotion_Call {
	return &Repositories_UpdatePromotion_Call{Call: _e.mock.On("UpdatePromotion", ctx, promotion)}
}

func (_c *Repositories_UpdatePromotion_Call) Run(run func(ctx context.Context, promotion model.Promotion)) *Repositories_UpdatePromotion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Promotion))
	})
	return _c
}

func (_c *Repositories_UpdatePromotion_Call) Return(_a0 error) *Repositories_UpdatePromotion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositories_UpdatePromotion_Call) RunAndReturn(run func(context.Context, model.Promotion) error) *Repositories_UpdatePromotion_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositories creates a new instance of Repositories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositories(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repositories {
	mock := &Repositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
